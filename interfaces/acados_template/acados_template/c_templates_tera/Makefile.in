#
# Copyright 2019 Gianluca Frison, Dimitris Kouzoupis, Robin Verschueren,
# Andrea Zanelli, Niels van Duijkeren, Jonathan Frey, Tommaso Sartor,
# Branimir Novoselnik, Rien Quirynen, Rezart Qelibari, Dang Doan,
# Jonas Koenemann, Yutao Chen, Tobias SchÃ¶ls, Jonas Schlagenhauf, Moritz Diehl
#
# This file is part of acados.
#
# The 2-Clause BSD License
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.;
#

ACADOS_FLAGS = -fPIC
{% if solver_options.qp_solver == "FULL_CONDENSING_QPOASES" %}
ACADOS_FLAGS += -DACADOS_WITH_QPOASES
{% endif %}
OBJ =
SIM_OBJ =
OBJ+= main_{{ model.name }}.o
{% if  solver_options.integrator_type == "ERK" %}
OBJ+= {{ model.name }}_model/{{ model.name }}_expl_ode_fun.o
OBJ+= {{ model.name }}_model/{{ model.name }}_expl_vde_forw.o
{% if solver_options.hessian_approx == "EXACT" %}
OBJ+= {{ model.name }}_model/{{ model.name }}_expl_ode_hess.o
{% endif %}
{% else %}
OBJ+= {{ model.name }}_model/{{ model.name }}_impl_dae_fun.o
OBJ+= {{ model.name }}_model/{{ model.name }}_impl_dae_fun_jac_x_xdot_z.o
OBJ+= {{ model.name }}_model/{{ model.name }}_impl_dae_jac_x_xdot_u_z.o
{% endif %}
{% if constraints.constr_type == "BGP" and dims.nphi > 0 %}
OBJ+= {{ con_phi.name }}_phi_constraint/{{ con_phi.name }}_phi_constraint.o
# OBJ+= {{ con_phi.name }}_r_constraint/{{ con_phi.name }}_r_constraint.o
{% endif %}
{% if constraints.constr_type_e == "BGP"  and dims.nphi_e > 0 %}
OBJ+= {{ con_phi_e.name }}_phi_e_constraint/{{ con_phi_e.name }}_phi_e_constraint.o
# OBJ+= {{ con_phi_e.name }}_r_e_constraint/{{ con_phi_e.name }}_r_e_constraint.o
{% endif %}
{% if constraints.constr_type == "BGH"  and dims.nh > 0 %}
OBJ+= {{ con_h.name }}_h_constraint/{{ con_h.name }}_h_constraint.o
{% endif %}
{% if constraints.constr_type_e == "BGH"  and dims.nh_e > 0 %}
OBJ+= {{ con_h_e.name }}_h_e_constraint/{{ con_h_e.name }}_h_e_constraint.o
{% endif %}
{% if cost.cost_type == "NONLINEAR_LS" %}
OBJ+= {{ cost_r.name }}_r_cost/{{ cost_r.name }}_r_cost.c 
{% endif %}
{% if cost.cost_type_e == "NONLINEAR_LS" %}
OBJ+= {{ cost_r_e.name }}_r_e_cost/{{ cost_r_e.name }}_r_e_cost.c 
{% endif %}
OBJ+= acados_solver_{{ model.name }}.o

SIM_OBJ+= acados_sim_solver_{{ model.name }}.o

INCLUDE_PATH = {{ acados_include_path }}
LIB_PATH = {{ acados_lib_path }}

all: clean casadi_fun main solver sim_solver example

CASADI_MODEL_SOURCE= 
{% if  solver_options.integrator_type == "ERK" %}
CASADI_MODEL_SOURCE+= {{ model.name }}_expl_ode_fun.c
CASADI_MODEL_SOURCE+= {{ model.name }}_expl_vde_forw.c 
{% if solver_options.hessian_approx == "EXACT" %}
CASADI_MODEL_SOURCE+= {{ model.name }}_expl_ode_hess.c 
{% endif %}
{% else %}
CASADI_MODEL_SOURCE+=	{{ model.name }}_impl_dae_fun.c 
CASADI_MODEL_SOURCE+=	{{ model.name }}_impl_dae_fun_jac_x_xdot_z.c 
CASADI_MODEL_SOURCE+=	{{ model.name }}_impl_dae_jac_x_xdot_u_z.c 
{% endif %}
{% if constraints.constr_type == "BGP" %}
CASADI_CON_PHI_SOURCE=
# CASADI_CON_R_SOURCE=
CASADI_CON_PHI_SOURCE+=  {{ con_phi.name }}_phi_constraint.c 
# CASADI_CON_R_SOURCE+=  {{ con_phi.name }}_r_constraint.c 
{% endif %}
{% if constraints.constr_type_e == "BGP" %}
CASADI_CON_PHI_E_SOURCE=
CASADI_CON_R_E_SOURCE=
CASADI_CON_PHI_E_SOURCE+=  {{ con_phi_e.name }}_phi_e_constraint.c 
# CASADI_CON_R_E_SOURCE+=  {{ con_phi_e.name }}_r_e_constraint.c 
{% endif %}
{% if dims.nh > 0 %}
CASADI_CON_H_SOURCE=
CASADI_CON_H_SOURCE+= {{ con_h.name }}_h_constraint.c 
{% endif %}
{% if dims.nh_e > 0 %}
CASADI_CON_H_E_SOURCE+= {{ con_h_e.name }}_h_e_constraint.c 
{% endif %}
CASADI_COST_R_SOURCE=
CASADI_COST_R_E_SOURCE=
{% if cost.cost_type == "NONLINEAR_LS" %}
CASADI_COST_R_SOURCE+= {{ cost_r.name }}_r_cost.c 
{% endif %}
{% if cost.cost_type_e == "NONLINEAR_LS" %}
CASADI_COST_R_E_SOURCE+= {{ cost_r_e.name }}_r_e_cost.c 
{% endif %}

casadi_fun:
	( cd {{ model.name }}_model; gcc $(ACADOS_FLAGS) -c  $(CASADI_MODEL_SOURCE))
	{% if constraints.constr_type == "BGP"  and dims.nphi > 0 %}
	( cd {{ con_phi.name }}_phi_constraint; gcc $(ACADOS_FLAGS) -c  $(CASADI_CON_PHI_SOURCE))
	# ( cd {{ con_phi.name }}_r_constraint; gcc $(ACADOS_FLAGS) -c  $(CASADI_CON_R_SOURCE))
	{% endif %}
	{% if constraints.constr_type_e == "BGP"  and dims.nphi_e > 0 %}
	( cd {{ con_phi_e.name }}_phi_e_constraint; gcc $(ACADOS_FLAGS) -c  $(CASADI_CON_PHI_E_SOURCE))
	# ( cd {{ con_phi_e.name }}_r_e_constraint; gcc $(ACADOS_FLAGS) -c  $(CASADI_CON_R_E_SOURCE))
	{% endif %}
	{% if constraints.constr_type == "BGH" and dims.nh > 0 %}
	( cd {{ con_h.name }}_h_constraint; gcc $(ACADOS_FLAGS) -c  $(CASADI_CON_H_SOURCE))
	{% endif %}
	{% if constraints.constr_type_e == "BGH" and dims.nh_e > 0 %}
	( cd {{ con_h_e.name }}_h_e_constraint; gcc $(ACADOS_FLAGS) -c  $(CASADI_CON_H_E_SOURCE))
	{% endif %}
	{% if cost.cost_type == "NONLINEAR_LS" %}
	( cd {{ cost_r.name }}_r_cost; gcc $(ACADOS_FLAGS) -c  $(CASADI_COST_R_SOURCE))
	{% endif %}
	{% if cost.cost_type_e == "NONLINEAR_LS" %}
	( cd {{ cost_r_e.name }}_r_e_cost; gcc $(ACADOS_FLAGS) -c  $(CASADI_COST_R_E_SOURCE))
	{% endif %}

main:
	gcc $(ACADOS_FLAGS) -c main_{{ model.name }}.c -I $(INCLUDE_PATH)/blasfeo/include/ -I $(INCLUDE_PATH)/hpipm/include/ \
	-I $(INCLUDE_PATH) -I $(INCLUDE_PATH)/acados/ -I $(INCLUDE_PATH)/qpOASES_e/

solver:
	gcc $(ACADOS_FLAGS) -c acados_solver_{{ model.name }}.c -I $(INCLUDE_PATH)/blasfeo/include/ -I $(INCLUDE_PATH)/hpipm/include/ \
	-I $(INCLUDE_PATH) -I $(INCLUDE_PATH)/acados/ -I $(INCLUDE_PATH)/qpOASES_e/

sim_solver:
	gcc $(ACADOS_FLAGS) -c acados_sim_solver_{{ model.name }}.c -I $(INCLUDE_PATH)/blasfeo/include/ -I $(INCLUDE_PATH)/hpipm/include/ \
	-I $(INCLUDE_PATH) -I $(INCLUDE_PATH)/acados/ -I $(INCLUDE_PATH)/qpOASES_e/

example:
	gcc $(ACADOS_FLAGS) -o main_{{ model.name }} $(OBJ) -L $(LIB_PATH) \
	-lacados -lhpipm -lblasfeo -lqpOASES_e -lm \
	-I $(INCLUDE_PATH)/blasfeo/include/ \
	-I $(INCLUDE_PATH)/hpipm/include/ \
	-I $(INCLUDE_PATH) \
	-I $(INCLUDE_PATH)/acados/ \
	-I $(INCLUDE_PATH)/qpOASES_e/

shared_lib: casadi_fun solver sim_solver
	gcc $(ACADOS_FLAGS) -shared -o libacados_solver_{{ model.name }}.so $(OBJ) $(SIM_OBJ) -L $(LIB_PATH) \
	-L $(LIB_PATH) \
	-lacados -lhpipm -lblasfeo -lqpOASES_e -lm \

clean:
	rm -f *.o
	rm -f *.so
	rm -f main_{{ model.name }}
